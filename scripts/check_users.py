#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ClosetMind.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.
"""

import sys
import os
from pathlib import Path
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from sqlalchemy.orm import sessionmaker
from sqlalchemy import func, and_, text
from src.database import engine, get_db
from src.models.user import User
from src.models.clothing import ClothingItem
from src.models.chat import Chat, Message
from src.models.waitlist import WaitListItem
from src.models.tryon import TryOn
from src.models.store import Store
from src.models.product import Product
from src.models.review import Review

def get_db_session():
    """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    return SessionLocal()

def get_user_statistics():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    db = None
    try:
        db = get_db_session()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = db.query(User).count()
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        active_users = db.query(User).filter(User.is_active == True).count()
        
        # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        inactive_users = db.query(User).filter(User.is_active == False).count()
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        yesterday = datetime.now() - timedelta(days=1)
        users_last_24h = db.query(User).filter(User.created_at >= yesterday).count()
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        week_ago = datetime.now() - timedelta(days=7)
        users_last_week = db.query(User).filter(User.created_at >= week_ago).count()
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
        month_ago = datetime.now() - timedelta(days=30)
        users_last_month = db.query(User).filter(User.created_at >= month_ago).count()
        
        # –°–∞–º—ã–π –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        first_user = db.query(User).order_by(User.created_at.asc()).first()
        
        # –°–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        latest_user = db.query(User).order_by(User.created_at.desc()).first()
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏
        users_with_phone = db.query(User).filter(User.phone.isnot(None)).count()
        
        return {
            'total_users': total_users,
            'active_users': active_users,
            'inactive_users': inactive_users,
            'users_last_24h': users_last_24h,
            'users_last_week': users_last_week,
            'users_last_month': users_last_month,
            'first_user': first_user,
            'latest_user': latest_user,
            'users_with_phone': users_with_phone
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None
    finally:
        # CRITICAL: Always close the database session
        if db:
            try:
                db.close()
            except Exception as close_error:
                print(f"Error closing database session: {close_error}")

def print_user_statistics():
    """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    print("üë• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô CLOSETMIND")
    print("=" * 50)
    
    stats = get_user_statistics()
    if not stats:
        return
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']:,}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ: {stats['active_users']:,}")
    print(f"   –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: {stats['inactive_users']:,}")
    print(f"   –° —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏: {stats['users_with_phone']:,}")
    print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    print(f"üìÖ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ü–û –í–†–ï–ú–ï–ù–ò:")
    print(f"   –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {stats['users_last_24h']:,}")
    print(f"   –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {stats['users_last_week']:,}")
    print(f"   –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: {stats['users_last_month']:,}")
    print()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–≤–æ–º –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if stats['first_user']:
        print(f"üë§ –ü–ï–†–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨:")
        print(f"   ID: {stats['first_user'].id}")
        print(f"   Username: {stats['first_user'].username}")
        print(f"   Email: {stats['first_user'].email}")
        print(f"   –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {stats['first_user'].created_at.strftime('%d.%m.%Y %H:%M:%S')}")
        print()
    
    if stats['latest_user']:
        print(f"üÜï –ü–û–°–õ–ï–î–ù–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨:")
        print(f"   ID: {stats['latest_user'].id}")
        print(f"   Username: {stats['latest_user'].username}")
        print(f"   Email: {stats['latest_user'].email}")
        print(f"   –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {stats['latest_user'].created_at.strftime('%d.%m.%Y %H:%M:%S')}")
        print()
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    if stats['total_users'] > 0:
        active_percentage = (stats['active_users'] / stats['total_users']) * 100
        phone_percentage = (stats['users_with_phone'] / stats['total_users']) * 100
        
        print(f"üìà –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
        print(f"   –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_percentage:.1f}%")
        print(f"   –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: {phone_percentage:.1f}%")
        print()
    
    print("=" * 50)

def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    print("üîå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–î")
    print("-" * 30)
    
    db = None
    try:
        db = get_db_session()
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        result = db.execute(text("SELECT 1")).scalar()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã users
        users_count = db.query(User).count()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ users –¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {users_count})")
        print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ")
        print("   - –ó–∞–ø—É—â–µ–Ω–∞ –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        print("   - –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –ª–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ (alembic upgrade head)")
        return False
    finally:
        # CRITICAL: Always close the database session
        if db:
            try:
                db.close()
            except Exception as close_error:
                print(f"Error closing database session: {close_error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not test_database_connection():
        sys.exit(1)
    
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print_user_statistics()
    
    # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    print("üí° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´:")
    print("   –î–ª—è API –¥–æ—Å—Ç—É–ø–∞: GET /api/v1/admin/users/stats")
    print("   –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: GET /api/v1/admin/users/count")
    print()

if __name__ == "__main__":
    main() 