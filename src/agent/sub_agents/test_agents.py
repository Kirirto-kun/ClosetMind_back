"""
–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∞–±-–∞–≥–µ–Ω—Ç–æ–≤.
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
"""
import asyncio
import json
from coordinator_agent import coordinate_request


async def test_search_agent():
    """–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º SearchAgent...")
    try:
        response = await coordinate_request("Find me a black t-shirt", user_id=1)
        print("‚úÖ SearchAgent —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(response.result).__name__}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ SearchAgent: {e}")
        return False


async def test_outfit_agent():
    """–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ–¥–µ–∂–¥—ã"""
    print("\nüëî –¢–µ—Å—Ç–∏—Ä—É–µ–º OutfitAgent...")
    try:
        response = await coordinate_request("What should I wear today?", user_id=1)
        print("‚úÖ OutfitAgent —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(response.result).__name__}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ OutfitAgent: {e}")
        return False


async def test_general_agent():
    """–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    print("\nüí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º GeneralAgent...")
    try:
        response = await coordinate_request("Hello, how are you?", user_id=1)
        print("‚úÖ GeneralAgent —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(response.result).__name__}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ GeneralAgent: {e}")
        return False


async def test_request_classification():
    """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤...")
    from coordinator_agent import RequestClassifier
    
    test_cases = [
        ("Find me a winter jacket", "search"),
        ("What should I wear today?", "outfit"),
        ("Hello, how are you?", "general"),
        ("I need to buy new shoes", "search"),
        ("Help me coordinate my wardrobe", "outfit"),
        ("What is the weather like?", "general"),
    ]
    
    all_correct = True
    for message, expected in test_cases:
        result = RequestClassifier.classify_request(message)
        if result == expected:
            print(f"‚úÖ '{message}' -> {result}")
        else:
            print(f"‚ùå '{message}' -> {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")
            all_correct = False
    
    return all_correct


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å–∞–±-–∞–≥–µ–Ω—Ç–æ–≤...\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
    classification_ok = await test_request_classification()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≥–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å .env —Ñ–∞–π–ª)
    try:
        search_ok = await test_search_agent()
        outfit_ok = await test_outfit_agent()
        general_ok = await test_general_agent()
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:")
        print(f"–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {'‚úÖ' if classification_ok else '‚ùå'}")
        print(f"SearchAgent: {'‚úÖ' if search_ok else '‚ùå'}")
        print(f"OutfitAgent: {'‚úÖ' if outfit_ok else '‚ùå'}")
        print(f"GeneralAgent: {'‚úÖ' if general_ok else '‚ùå'}")
        
        if all([classification_ok, search_ok, outfit_ok, general_ok]):
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ–∞–π–ª .env —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Azure OpenAI")


if __name__ == "__main__":
    asyncio.run(main()) 